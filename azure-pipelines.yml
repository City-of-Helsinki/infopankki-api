# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

resources:
  containers:
  - container: db
    image: postgres:9
    env:
      POSTGRES_USER: "django"
      POSTGRES_PASSWORD: "djangotest"
      POSTGRES_DB: "infopankki"
  - container: copy36
    image: python:3.6
    env:
      DATABASE_URL: "postgres://django:djangotest@db/infopankki"

variables:
  tag1: '$(Build.SourceBranchName)'
  tag2: '$(Build.SourceVersion)'

jobs:
- job: RunInContainer
  pool:
    vmImage: 'ubuntu-latest'
  
  services:
    db: db

  strategy:
    matrix:
      py36:
        containerResource: copy36

  container: $[ variables['containerResource'] ]


  steps:
    - task: PythonScript@0
      displayName: 'Export project path'
      inputs:
        scriptSource: 'inline'
        script: |
          """Search all subdirectories for `manage.py`."""
          from glob import iglob
          from os import path
          # Python >= 3.5
          manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
          if not manage_py:
              raise SystemExit('Could not find a Django project')
          project_location = path.dirname(path.abspath(manage_py))
          print('Found Django project in', project_location)
          print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
    - script: printenv
    - script: |
        sudo apt update
        sudo apt install -y libgdal-dev postgresql-9.6-postgis-2.4
        python -m pip install --upgrade pip
        python -m venv ./venv
        ./venv/bin/pip install -r requirements.txt
      displayName: 'Install prerequisites'
    - script: |
        pushd '$(projectRoot)'
        ./venv/bin/python manage.py test
      displayName: 'Run tests'
    
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '17.09.0-ce'
        
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          "bar=${$(Build.SourceBranchName)//-/_}"
          "##vso[task.setvariable variable=tag]echo $bar"
      displayName: 'Set docker image tag name'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    
    - script: printenv
    
    - task: Docker@2
      inputs:
        containerRegistry: 'azure_registry'
        repository: 'infopankki'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          '$(tag)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))